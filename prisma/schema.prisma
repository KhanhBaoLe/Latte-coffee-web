generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model category {
  id        String    @id @default(uuid())
  name      String    @unique
  startId   String
  endId     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  product[]
}

model product {
  id            String         @id
  title         String
  description   String
  price         Float
  originalPrice Float?
  rating        Float
  reviews       Int
  image         String
  categoryId    String
  sizes         Json
  milkOptions   Json
  drinkOptions  Json
  toppings      Json
  basePrices    Json
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orderItems    order_item[]
  category      category       @relation(fields: [categoryId], references: [id])
  webOrderItems web_order_item[]
}

model manager_table {
  id        String   @id(map: "Table_pkey") @default(uuid())
  tableId   Int      @unique(map: "Table_tableId_key")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("available")
  orders    order[]
}

model order {
  id              String         @id @default(cuid())
  table           manager_table?  @relation(fields: [tableId], references: [id])
  tableId         String?
  items           order_item[]
  total           Float
  status          order_status    @default(PENDING)
  customerName    String
  customerEmail   String
  customerPhone   String
  note            String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  payment         payment?
}

model web_order {
  id              String         @id @default(cuid())
  items           web_order_item[]
  total           Float
  status          order_status    @default(PENDING)
  deliveryMethod  delivery_method @default(PICKUP)
  deliveryAddress String?
  customerName    String
  customerEmail   String
  customerPhone   String
  note            String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  payment         payment?
}

model web_order_item {
  id        String   @id @default(cuid())
  order     web_order @relation(fields: [orderId], references: [id])
  orderId   String
  product   product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  size      String?
  milk      String?
  drink     String?
  toppings  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model order_item {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  title     String
  quantity  Int
  price     Float
  size      String?
  milk      String?
  drink     String?
  toppings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model payment {
  id            String        @id @default(cuid())
  order         order?        @relation(fields: [orderId], references: [id])
  orderId       String?       @unique
  webOrder      web_order?     @relation(fields: [webOrderId], references: [id])
  webOrderId    String?       @unique
  amount        Float
  paymentMethod payment_method
  status        payment_status @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum order_status {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum payment_method {
  CASH
  CREDIT_CARD
  MOMO
  ZALOPAY
}

enum payment_status {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum delivery_method {
  PICKUP
  DELIVERY
  DINE_IN
  WEB_DELIVERY
}
